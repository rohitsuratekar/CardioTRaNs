#  Copyright (c) 2019.
#  BooleanTRN (previously CardioTraNs)
#  Author: Rohit Suratekar
#  Website: https://github.com/rohitsuratekar/CardioTRaNs
#
# Parsers related to NGS files
#
# In the data/rnaseq folder data structure is like following
# SRA_ID/SRA_ID_gene_expression.tsv (StringTie output file)
# SRA_ID/mapping/SRA_ID_Log.final.out (STAR log file)
# SRA_ID/salmon/quant.sf (Salmon output file)
# SRA_ID/salmon/converted_SRA_ID.tsv (processed Salmon file)
# SRA_ID/salmon/aux_info/meta_info.json (Salmon log)
#
# Salmon processed files are generated by CardioPipeLine
# (https://github.com/rohitsuratekar/CardioPipeLine)

import json
import os.path

import pandas as pd

from constants.ngs import *
from constants.system import FILE_SRA_DETAILS, DATA_RNA_SEQ
from helpers.utils import log


def _make_file_paths(output_method, file_data, show_log: bool = False):
    sra_ids = file_data[R_SEQ_FILE_SRA_ID].values
    files = []
    for i in sra_ids:
        if output_method == OUTPUT_STRING_TIE:
            files.append("{}/{}/{}_gene_expression.tsv".format(DATA_RNA_SEQ,
                                                               i, i))
        elif output_method == OUTPUT_STAR:
            files.append("{}/{}/mapping/{}_Log.final.out".format(
                DATA_RNA_SEQ, i, i))
        elif output_method == OUTPUT_SALMON:
            files.append("{}/{}/salmon/converted_{}.tsv".format(
                DATA_RNA_SEQ, i, i))
        elif output_method == OUTPUT_SALMON_LOG:
            files.append("{}/{}/salmon/aux_info/meta_info.json".format(
                DATA_RNA_SEQ, i))
        else:
            log("Unknown Output format", raise_error=True,
                add_to_console=show_log)

    filtered_files = []
    for f in files:
        if not os.path.exists(f):
            log("File doesn't exists. Ignoring {}".format(f),
                add_to_console=show_log)
        else:
            filtered_files.append(f)

    return filtered_files


def get_rna_seq_files(output_method,
                      bio_project: str = 0,
                      time: int = None,
                      sra_id: str = None,
                      genotype: str = None,
                      tissue: str = None,
                      selection: str = None,
                      layout: str = None):
    with open(FILE_SRA_DETAILS) as f:
        data = pd.read_csv(f, delimiter=",")

        if sra_id is not None:
            data = data[data[R_SEQ_FILE_SRA_ID] == sra_id]
            return _make_file_paths(output_method, data)
        if time is not None:
            data = data[data[R_SEQ_FILE_TIME] == time]
        if genotype is not None:
            data = data[data[R_SEQ_FILE_GENOTYPE] == genotype]
        if tissue is not None:
            data = data[data[R_SEQ_FILE_TISSUE] == tissue]
        if selection is not None:
            data = data[data[R_SEQ_FILE_SELECTION] == selection]
        if layout is not None:
            data = data[data[R_SEQ_FILE_LAYOUT] == layout]

        if bio_project == 0:
            return _make_file_paths(output_method, data)

        data = data[data[R_SEQ_FILE_BIO_PROJECT] == bio_project]
        return _make_file_paths(output_method, data)


def get_all_meta_data():
    out = {}
    with open(FILE_SRA_DETAILS) as f:
        data = pd.read_csv(f, delimiter=",")
        bio = data[R_SEQ_FILE_BIO_PROJECT].unique()
        for b in bio:
            project = data[data[R_SEQ_FILE_BIO_PROJECT] == b]
            out[b] = {
                R_SEQ_FILE_REF_DETAILS:
                    project[R_SEQ_FILE_REF_DETAILS].unique()[0],
                R_SEQ_FILE_SELECTION: project[R_SEQ_FILE_SELECTION].unique()[0],
                R_SEQ_FILE_LAYOUT: project[R_SEQ_FILE_LAYOUT].unique()[0],
                R_SEQ_FILE_INSTRUMENT: project[R_SEQ_FILE_INSTRUMENT].unique()[
                    0],
                R_SEQ_FILE_TISSUE: project[R_SEQ_FILE_TISSUE].unique(),
                R_SEQ_FILE_GENOTYPE: project[R_SEQ_FILE_GENOTYPE].unique(),
                R_SEQ_FILE_SRA_ID: project[R_SEQ_FILE_SRA_ID].values
            }
        return out


def parse(filename, output_method):
    with open(filename) as f:
        if output_method in [OUTPUT_STRING_TIE, OUTPUT_SALMON]:
            return pd.read_csv(f, delimiter="\t")
        elif output_method == OUTPUT_STAR:
            star_out = {}
            for line in f:
                k = line.strip().split("|")
                if len(k) == 2:
                    k = [x.strip() for x in k]
                    star_out[k[0]] = k[1]
            return star_out
        elif output_method == OUTPUT_SALMON_LOG:
            return json.load(f)
        else:
            log("Unknown output format", raise_error=True)


def run():
    d = get_all_meta_data()
    output = OUTPUT_SALMON_LOG
    for key in d:
        file = get_rna_seq_files(output, bio_project=key)[0]
        for k in parse(file, output).keys():
            print(k)
        break
