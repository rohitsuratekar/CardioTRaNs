#  Copyright (c) 2019.
#  BooleanTRN (previously CardioTraNs)
#  Author: Rohit Suratekar
#  Website: https://github.com/rohitsuratekar/CardioTRaNs
#
# Parsers related to NGS files
#
# In the data/rnaseq folder data structure is like following
# SRA_ID/SRA_ID_gene_expression.tsv (StringTie output file)
# SRA_ID/mapping/SRA_ID_Log.final.out (STAR log file)
# SRA_ID/salmon/quant.sf (Salmon output file)
# SRA_ID/salmon/converted_SRA_ID.tsv (processed Salmon file)
# SRA_ID/salmon/aux_info/meta_info.json (Salmon log)
#
# Salmon processed files are generated by CardioPipeLine
# (https://github.com/rohitsuratekar/CardioPipeLine)

import json
import os.path

import pandas as pd

from constants.ngs import *
from constants.system import *
from helpers.utils import log


def _make_file_paths(output_method, file_data, show_log: bool = False) -> list:
    """
    Makes the path of file based on the folder structure described in the
    header of this file

    :param output_method: Output method
    :param file_data: all available data
    :param show_log: If True, logs will be shown
    :return: list of files
    """
    sra_ids = file_data[R_SEQ_FILE_SRA_ID].values
    files = []
    for i in sra_ids:
        if output_method == OUTPUT_STRING_TIE:
            files.append("{}/{}/{}_gene_expression.tsv".format(DATA_RNA_SEQ,
                                                               i, i))
        elif output_method == OUTPUT_STAR:
            files.append("{}/{}/mapping/{}_Log.final.out".format(
                DATA_RNA_SEQ, i, i))
        elif output_method == OUTPUT_SALMON:
            files.append("{}/{}/salmon/converted_{}.tsv".format(
                DATA_RNA_SEQ, i, i))
        elif output_method == OUTPUT_SALMON_LOG:
            files.append("{}/{}/salmon/aux_info/meta_info.json".format(
                DATA_RNA_SEQ, i))
        else:
            log("Unknown Output format", raise_error=True,
                add_to_console=show_log)

    filtered_files = []
    for f in files:
        if not os.path.exists(f):
            log("File doesn't exists. Ignoring {}".format(f),
                add_to_console=show_log)
        else:
            filtered_files.append(f)

    return filtered_files


def get_rna_seq_files(output_method,
                      bio_project: str = 0,
                      time: int = None,
                      sra_id: str = None,
                      genotype: str = None,
                      tissue: str = None,
                      selection: str = None,
                      layout: str = None) -> list:
    """
    Gets names of RNA-seq file available in the data based on other options
    provided

    :param output_method: Output Method
    :param bio_project: Bioproject ID
    :param time: developmental time period in hours post fertilization
    :param sra_id: SRA ID
    :param genotype: Genotype of the sample
    :param tissue: Tissue or organ or cells
    :param selection: Type of selection (cDNA or other)
    :param layout: Single or Paired
    :return: List of file names with their paths
    """

    with open(FILE_SRA_DETAILS) as f:
        data = pd.read_csv(f, delimiter=",")

        if sra_id is not None:
            data = data[data[R_SEQ_FILE_SRA_ID] == sra_id]
            return _make_file_paths(output_method, data)
        if time is not None:
            data = data[data[R_SEQ_FILE_TIME] == time]
        if genotype is not None:
            data = data[data[R_SEQ_FILE_GENOTYPE] == genotype]
        if tissue is not None:
            data = data[data[R_SEQ_FILE_TISSUE] == tissue]
        if selection is not None:
            data = data[data[R_SEQ_FILE_SELECTION] == selection]
        if layout is not None:
            data = data[data[R_SEQ_FILE_LAYOUT] == layout]

        if bio_project == 0:
            return _make_file_paths(output_method, data)

        data = data[data[R_SEQ_FILE_BIO_PROJECT] == bio_project]
        return _make_file_paths(output_method, data)


def get_all_meta_data() -> dict:
    """
    :return: All the metadata of available NGS files where keys are
    bioproject IDs
    """
    out = {}
    with open(FILE_SRA_DETAILS) as f:
        data = pd.read_csv(f, delimiter=",")
        bio = data[R_SEQ_FILE_BIO_PROJECT].unique()
        for b in bio:
            project = data[data[R_SEQ_FILE_BIO_PROJECT] == b]
            out[b] = {
                R_SEQ_FILE_REF_DETAILS:
                    project[R_SEQ_FILE_REF_DETAILS].unique()[0],
                R_SEQ_FILE_SELECTION: project[R_SEQ_FILE_SELECTION].unique()[
                    0],
                R_SEQ_FILE_LAYOUT: project[R_SEQ_FILE_LAYOUT].unique()[0],
                R_SEQ_FILE_INSTRUMENT: project[R_SEQ_FILE_INSTRUMENT].unique()[
                    0],
                R_SEQ_FILE_TISSUE: project[R_SEQ_FILE_TISSUE].unique(),
                R_SEQ_FILE_GENOTYPE: project[R_SEQ_FILE_GENOTYPE].unique(),
                R_SEQ_FILE_SRA_ID: project[R_SEQ_FILE_SRA_ID].values
            }
        return out


def parse(filename, output_method):
    """
    Parse the NGS data
    :param filename: name of the file
    :param output_method: Output Method
    :return: pd.DataFrame or Json depending on output method
    """
    with open(filename) as f:
        if output_method in [OUTPUT_STRING_TIE, OUTPUT_SALMON]:
            return pd.read_csv(f, delimiter="\t")
        elif output_method == OUTPUT_STAR:
            star_out = {}
            for line in f:
                k = line.strip().split("|")
                if len(k) == 2:
                    k = [x.strip() for x in k]
                    star_out[k[0]] = k[1]
            return star_out
        elif output_method == OUTPUT_SALMON_LOG:
            return json.load(f)
        else:
            log("Unknown output format", raise_error=True)


def get_string_tie_data(genotype, time, bioproject) -> list:
    """
    Returns all the StringTie data in the form of pd.DataFrame list
    :param genotype: Genotype of the sample
    :param time: Developmental time point in hours post fertilization
    :param bioproject: ID of the bioproject
    :return: List of pd.DataFrames
    """
    dfs = []
    for f in get_rna_seq_files(OUTPUT_STRING_TIE,
                               bio_project=bioproject,
                               genotype=genotype,
                               time=time):
        data = parse(f, OUTPUT_STRING_TIE)
        dfs.append(data)

    return dfs


def get_salmon_data(genotype, time, bioproject):
    """
    Returns all Salmon data
    :param genotype: Genotype of the sample
    :param time: Developmental time point in hours post fertilization
    :param bioproject: Bioproject ID
    :return: list of pd.DataFrames
    """
    dfs = []
    for f in get_rna_seq_files(OUTPUT_SALMON, bio_project=bioproject,
                               genotype=genotype, time=time):
        data = parse(f, OUTPUT_SALMON)
        dfs.append(data)

    return dfs


def average_data(dataframes: list, output_method: str):
    """
    Averages all the dataframes values
    :param dataframes: List of pd.DataFrames
    :param output_method: Output Method
    :return: Pd.DataFrame or Empty list (if input is empty)
    """

    # Return empty list of there are no items in the input
    if len(dataframes) == 0:
        return dataframes

    if output_method == OUTPUT_STRING_TIE:
        ref = None  # Reference dataframe to keep all common information
        data = []
        for d in dataframes:

            # Drop duplicate GENE IDs and keep only with highest TMP values
            k = (d
                 .sort_values(by=STRING_TPM)
                 .drop_duplicates([STRING_GENE_ID], keep="last")
                 )

            if ref is None:
                ref = k[[STRING_GENE_ID, STRING_GENE_NAME, STRING_REFERENCE,
                         STRING_STRAND, STRING_START, STRING_END]]

            k = k[[STRING_GENE_ID,
                   STRING_COVERAGE,
                   STRING_FPKM, STRING_TPM]]

            k = k.set_index(STRING_GENE_ID)
            data.append(k)

        data = sum(data) / len(data)
        ref = ref.set_index(STRING_GENE_ID)

        data = (pd
                .concat([data, ref], axis=1, sort=True)
                .rename_axis(STRING_GENE_ID)
                .reset_index()
                )

        return data

    elif output_method == OUTPUT_SALMON:
        ref = None
        data = []
        for d in dataframes:
            k = (d
                 .sort_values(by=SALMON_TPM)
                 .drop_duplicates([SALMON_GENE_STABLE_ID], keep="last"))

            if ref is None:
                ref = k[[SALMON_NAME, SALMON_LENGTH,
                         SALMON_EFFECTIVE_LENGTH, SALMON_GENE_STABLE_ID,
                         SALMON_GENE_NAME, SALMON_ZFIN_ID,
                         SALMON_TRANSCRIPT_SOURCE]]

            k = k[[SALMON_GENE_STABLE_ID, SALMON_TPM, SALMON_NUM_READS]]
            k = k.set_index(SALMON_GENE_STABLE_ID)
            data.append(k)

        data = sum(data) / len(data)
        ref = ref.set_index(SALMON_GENE_STABLE_ID)

        data = (pd
                .concat([data, ref], axis=1, sort=True)
                .rename_axis(SALMON_GENE_STABLE_ID)
                .reset_index())

        return data


def compare_stringtie_salmon(genotype, time, bioproject):
    """
    Gets both StringTie and Salmon TPM values and compares them

    if multiple transcripts are found, it sums the TPM values

    :param genotype: Genotype of the sample
    :param time: Developmental time point in hours post fertilization
    :param bioproject: Bioproject ID
    :return: pd.DataFrame
    """
    star = get_string_tie_data(genotype, time, bioproject)
    salmon = get_salmon_data(genotype, time, bioproject)
    star = average_data(star, OUTPUT_STRING_TIE)
    salmon = average_data(salmon, OUTPUT_SALMON)

    if len(star) == 0 or len(salmon) == 0:
        raise Exception("One or more dataset for given options (genotype, "
                        "time and bioproject) is not available")

    # Need to rename columns to the same name so that they can be combined
    # in one column
    gene_names1 = (star[[STRING_GENE_ID, STRING_GENE_NAME]]
                   .set_index(STRING_GENE_ID)
                   .rename(columns={STRING_GENE_NAME: STRING_GENE_NAME}))
    gene_names2 = (salmon[[SALMON_GENE_STABLE_ID, SALMON_GENE_NAME]]
                   .set_index(SALMON_GENE_STABLE_ID)
                   .rename(columns={SALMON_GENE_NAME: STRING_GENE_NAME}))

    star = (star[[STRING_GENE_ID, STRING_TPM]]
            .set_index(STRING_GENE_ID)
            .rename(columns={STRING_TPM: OUTPUT_STRING_TIE}))
    salmon = (salmon[[SALMON_GENE_STABLE_ID, SALMON_TPM]]
              .set_index(SALMON_GENE_STABLE_ID)
              .rename(columns={SALMON_TPM: OUTPUT_SALMON}))

    data = pd.concat([star, salmon],
                     axis=1,
                     sort=True)

    genes = (pd.concat([gene_names1, gene_names2], axis=0, sort=True)
             .rename_axis(STRING_GENE_ID)
             .reset_index()
             .drop_duplicates([STRING_GENE_ID])
             .set_index(STRING_GENE_ID))

    data = (pd.concat([data, genes], axis=1, sort=True)
            .rename_axis(STRING_GENE_ID)
            .reset_index()
            .groupby(by=STRING_GENE_NAME, as_index=False)
            .agg({OUTPUT_STRING_TIE: "sum", OUTPUT_SALMON: "sum",
                  STRING_GENE_ID: "first"}))  # Keep StringTie Gene IDs

    return data


def run():
    d = compare_stringtie_salmon(GENOTYPE_WT, 48, BIO_PROJECT_WINATA_LAB)
    print(d[d[STRING_GENE_NAME] == "hand2"])
